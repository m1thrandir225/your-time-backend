// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: task.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
    title,
    description,
    due_date,
    reminder_date,
    user_id
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING id, title, due_date, reminder_date, description, user_id, created_at, updated_at
`

type CreateTaskParams struct {
	Title        string         `json:"title"`
	Description  sql.NullString `json:"description"`
	DueDate      time.Time      `json:"due_date"`
	ReminderDate sql.NullTime   `json:"reminder_date"`
	UserID       uuid.UUID      `json:"user_id"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Title,
		arg.Description,
		arg.DueDate,
		arg.ReminderDate,
		arg.UserID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DueDate,
		&i.ReminderDate,
		&i.Description,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, title, due_date, reminder_date, description, user_id, created_at, updated_at FROM tasks 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTaskByID(ctx context.Context, id uuid.UUID) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DueDate,
		&i.ReminderDate,
		&i.Description,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTasksByUser = `-- name: GetTasksByUser :many
SELECT id, title, due_date, reminder_date, description, user_id, created_at, updated_at FROM tasks 
WHERE user_id = $1
`

func (q *Queries) GetTasksByUser(ctx context.Context, userID uuid.UUID) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.DueDate,
			&i.ReminderDate,
			&i.Description,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
